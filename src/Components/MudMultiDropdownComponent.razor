@using global::MudBlazor

<MudSelectExtended T="TranslatedEnumItem"
                   ItemCollection=@items
                   SearchBox="@Searchable"
                   SearchBoxClearable=true
                   SearchFunc=SearchFunc
                   Disabled="@Disabled"
                   Label="@Label"                   
                   @bind-SelectedValues="@InternalValues"
                   ReadOnly="@ReadOnly"
                   ErrorText="@ErrorHelperText"
                   MultiSelection=true                   
                   HelperText=@HelperText
                   Error=@(!string.IsNullOrWhiteSpace(ErrorHelperText))
                   Clearable="@Clearable"
                   ToStringFunc="@(i => i.Label)"
                   Variant="@Variant" />


@code {
    ICollection<TranslatedEnumItem> items = [];

    protected override void OnInitialized()
    {
        if (Items?.All(x => string.IsNullOrWhiteSpace(x.Value) && string.IsNullOrWhiteSpace(x.Label)) == true)
        {
            HelperText = "There are no items to select for this dropdown";
            Disabled = true;
        }

        if (Value?.Any() == true && Items?.Any() == true)
        {
            internalValues = Items.Where(x => Value?.Contains(x.Value) == true);
        }

        items = Items?.ToList() ?? [];
    }

    protected override void OnParametersSet()
    {
        items = Items?.ToList() ?? [];
        internalValues = items.Where(x => Value?.Contains(x.Value) == true);
        StateHasChanged();
    }

    IEnumerable<TranslatedEnumItem> internalValues = [];

    private IEnumerable<TranslatedEnumItem> InternalValues
    {
        get => internalValues;
        set
        {
            internalValues = value;
            InvokeAsync(() => OnValueChanged.InvokeAsync(internalValues.Select(x => x.Value)));
        }
    }


    bool SearchFunc(TranslatedEnumItem item, string searchValue)
    {
        if (string.IsNullOrWhiteSpace(searchValue))
        {
            return true;
        }

        var valueToSearchOn = !string.IsNullOrWhiteSpace(item.Label)
               ? item.Label
               : item.Value;

        if (SearchOperator == DropdownSearchOperator.Contains)
        {
            if (SearchCaseSensitive)
            {
                return valueToSearchOn.Contains(searchValue);
            }
            return valueToSearchOn.Contains(searchValue, StringComparison.OrdinalIgnoreCase);
        }

        if (SearchOperator == DropdownSearchOperator.StartsWith)
        {
            if (SearchCaseSensitive)
            {
                return valueToSearchOn.StartsWith(searchValue);
            }
            return valueToSearchOn.StartsWith(searchValue, StringComparison.OrdinalIgnoreCase);
        }

        if (SearchOperator == DropdownSearchOperator.Equals)
        {
            if (SearchCaseSensitive)
            {
                return valueToSearchOn.Equals(searchValue);
            }
            return valueToSearchOn.Equals(searchValue, StringComparison.OrdinalIgnoreCase);
        }

        return false;
    }

    [Parameter]
    public IEnumerable<TranslatedEnumItem> Items { get; set; } = Array.Empty<TranslatedEnumItem>();

    [Parameter]
    public bool Clearable { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public bool Searchable { get; set; }

    [Parameter]
    public DropdownSearchOperator SearchOperator { get; set; }

    [Parameter]
    public bool SearchCaseSensitive { get; set; }

    [Parameter]
    public EventCallback<IEnumerable<string>> OnValueChanged { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public string? ErrorHelperText { get; set; }

    [Parameter]
    public string? HelperText { get; set; }

    [Parameter]
    public IEnumerable<string>? Value { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public Variant Variant { get; set; } = Variant.Outlined;
}
