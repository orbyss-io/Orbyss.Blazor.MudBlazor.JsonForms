@using Orbyss.Blazor.JsonForms.Constants
@using global::MudBlazor;

@typeparam TDate
@inherits MudBlazorFormComponentBase<TDate>

<MudDateWheelPicker Value="@value"
                    ValueChanged="@OnChanged"
                    ShowHeader=true
                    Culture="@Culture"
                    DateView=DateView.Both
                    Error="@(!string.IsNullOrWhiteSpace(ErrorHelperText))"
                    ErrorText="@ErrorHelperText"
                    Disabled="@Disabled"
                    ReadOnly="@ReadOnly"
                    HelperText="@HelperText"
                    Label="@Label"
                    Variant="@Variant"
                    Clearable=true
                    Underline=@Underline          
                    Editable=@AllowManualInput />

@code {

    private DateTime? value;

    protected override void OnParametersSet()
    {
        if (ConvertToDateTime is null)
        {
            value = null;
        }
        else
        {
            value = ConvertToDateTime(Value);
        }

        base.OnParametersSet();
    }

    [Parameter]
    public bool AllowManualInput { get; set; }
        
    [Parameter]
    public Func<DateTime?, TDate>? ConvertFromDateTime { get; set; }

    [Parameter]
    public Func<TDate, DateTime?>? ConvertToDateTime { get; set; }
    
    private Task OnChanged(DateTime? value)
    {
        if (this.value.HasValue)
        {
            this.value = value;
        }

        if (!value.HasValue || ConvertToDateTime is null)
        {
            return OnValueChanged.InvokeAsync(default);
        }

        if (ConvertFromDateTime is not null)
        {
            return OnValueChanged.InvokeAsync(
                ConvertFromDateTime.Invoke(value)
            );
        }

        return Task.CompletedTask;
    }
}
