@using Orbyss.Blazor.JsonForms.Constants
@using global::MudBlazor;

@typeparam TDate
@inherits MudBlazorFormComponentBase<TDate>

<MudDatePicker @bind-Date=@InternalValue
               Error="@(!string.IsNullOrWhiteSpace(ErrorHelperText))"
               ErrorText="@ErrorHelperText"
               Disabled="@Disabled"
               ReadOnly="@ReadOnly"
               HelperText="@HelperText" 
               Label="@Label" 
               Variant="@Variant" 
               Culture="@Culture"
               Clearable=true 
               MinDate="@MinimumDate"
               MaxDate="@MaximumDate"
               Editable=@AllowManualInput />

@code {
    DateTime? internalValue;

    private DateTime? InternalValue 
    { 
        get => internalValue; 
        set
        {
            internalValue = value;
            InvokeAsync(() => OnChanged(internalValue));
        }
    }

    [Parameter]
    public bool AllowManualInput { get; set; }

    [Parameter]
    public DateTime? MinimumDate { get; set; }

    [Parameter]
    public DateTime? MaximumDate { get; set; }

    [Parameter]
    public string? Format { get; set; }

    [Parameter]
    public Func<DateTime?, TDate>? ConvertFromDateTime { get; set; }

    [Parameter]
    public Func<TDate, DateTime?>? ConvertToDateTime { get; set; }

    private Task OnChanged(DateTime? value)
    {        
        if (!value.HasValue || ConvertToDateTime is null)
        {
            return OnValueChanged.InvokeAsync(default);
        }

        if (ConvertFromDateTime is not null)
        {
            return OnValueChanged.InvokeAsync(
                ConvertFromDateTime.Invoke(value)
            );
        }

        return Task.CompletedTask;
    }
}
